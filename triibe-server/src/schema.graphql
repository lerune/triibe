### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Chat {
  id: ID!
  messages(after: String, before: String, first: Int, last: Int, skip: Int): [Message!]
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

input ChatCreateManyWithoutChatsInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutUsersInput!]
}

input ChatCreateOneWithoutChatInput {
  connect: ChatWhereUniqueInput
  create: ChatCreateWithoutMessagesInput
}

input ChatCreateWithoutMessagesInput {
  id: ID
  users: UserCreateManyWithoutUsersInput
}

input ChatCreateWithoutUsersInput {
  id: ID
  messages: MessageCreateManyWithoutMessagesInput
}

input ChatWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

type Message {
  content: String!
  id: ID!
  sentAt: DateTime!
  sentBy: User!
}

input MessageCreateManyWithoutMessagesInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutChatInput!]
}

input MessageCreateOneWithoutMessageInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutSentByInput
}

input MessageCreateWithoutChatInput {
  content: String!
  id: ID
  sentAt: DateTime
  sentBy: UserCreateOneWithoutSentByInput!
}

input MessageCreateWithoutSentByInput {
  chat: ChatCreateOneWithoutChatInput
  content: String!
  id: ID
  sentAt: DateTime
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  deleteOneUser(where: UserWhereUniqueInput!): User
  signUpUser(data: UserCreateInput!): User!
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

type User {
  chats(after: String, before: String, first: Int, last: Int, skip: Int): [Chat!]
  email: String!
  id: ID!
  name: String
}

input UserCreateInput {
  chats: ChatCreateManyWithoutChatsInput
  email: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  name: String
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutChatsInput!]
}

input UserCreateOneWithoutSentByInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessageInput
}

input UserCreateWithoutChatsInput {
  email: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  name: String
}

input UserCreateWithoutMessageInput {
  chats: ChatCreateManyWithoutChatsInput
  email: String!
  id: ID
  name: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
